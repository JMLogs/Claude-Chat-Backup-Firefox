This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-01T20:14:17.342Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
LICENSE
README.md
src/chat_export_background.ts
src/html/chat_export_popup.html
src/manifest.json
src/ui/chat_export_popup.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
/node_modules/
/dist/
/package.json
/package-lock.json
/tsconfig.json
/.idea

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Richard-Weiss

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
# Claude.ai Chat Backup - Firefox

## Description
**Claude.ai Chat Backup - Firefox** is a Firefox extension that allows users to easily backup all their conversations from Claude.ai into a single JSON file. This tool is perfect if you want to process the files downstream with another tool.

## Features
- One-click backup of all Claude.ai conversations which for example takes ~5 seconds for ~300 conversations
- Exports conversations to a single JSON file
- Filename includes timestamp and timezone offset for easy organization
- Very simple interface

## Installation
1. Download the extension from the [Firefox Addon store](https://addons.mozilla.org/en-US/firefox/addon/claude-ai-chat-backup/)
2. Click on "Add to Firefox" to install the extension

## Usage
1. Click on the "Claude.ai Chat Backup" extension in your Firefox extension menu
![Extension Menu](./screenshots/extension_menu.png)
2. In the popup, click the "Backup Conversations" button
![Popup](./screenshots/backup.png)
3. Give it a few seconds to make the requests (If it takes more than 10 seconds you probably broke it, nice job! Sounds like a you problem though...)
![Eepy](./screenshots/eepy.png)
4. Choose where you want to save the JSON file
![File explorer](./screenshots/file_explorer.png)
5. Your conversations will be downloaded as a JSON file named in the format: `YYYY-MM-DDTHHMMÂ±Z_claude_conversations_export.json`
![Post download](./screenshots/post_download.png)

## Technical Details
- Built using WebExtensions API
- Written in TypeScript
- Uses `manifest_version` 2
- Requires permissions for cookies, downloads, and access to https://claude.ai/*
  - `cookies`: To know the id of your organization for the API requests
  - `downloads`: To download the JSON file to your device
  - `https://claude.ai/*`: To access the Claude.ai website and make API requests

## Files
- `manifest.json`: Extension configuration
- `chat_export_popup.html`: HTML for the popup UI
- `chat_export_popup.ts`: TypeScript for popup functionality
- `chat_export_background.ts`: Background script for handling API requests and file downloads

## FAQ

### Who can access my data?
Your conversations stay between you, your device and Anthropic. Maybe some [insert intelligence agency] agent too, but they don't count.

### Are you planning to add more features?
Nope. This extension does one thing, and it does it well.

### Will you be updating this regularly?
Unless it breaks, probably not. It works, so why mess with it?

### Can you add support for [insert any feature]?
See previous answers. The extension backs up conversations. That's it.

### I found a bug. Will you fix it?
If it's stopping the extension from doing its one job, maybe. Otherwise, see above.

### Can I contribute to this project?
You're welcome to fork it and go wild. Or shamelessly copy-paste it, I don't care. I won't do any PR reviews though, so I guess no.

### Will you port this to Chrome/Safari/Opera/etc.?
That sounds like work. So, no.

### How often should I back up my conversations?
Whenever you feel like it.

### Is there a premium version with more features?
There isn't even a basic version with more features.

### Where can I get support?
You're looking at all the support you're going to get. This FAQ is it.

### Are you okay?
No, I hate front-end development. Claude did >90% of the work and I still hated it.



## Disclaimer
This extension is not officially associated with Anthropic or Claude.ai. Use at your own risk.

================
File: src/chat_export_background.ts
================
async function getCookie(): Promise<string | null> {
    const cookie = await browser.cookies.get({
        url: 'https://claude.ai',
        name: 'lastActiveOrg'
    });
    return cookie ? cookie.value : null;
}

async function fetchConversations(organizationId: string): Promise<any[]> {
    const url = `https://claude.ai/api/organizations/${organizationId}/chat_conversations`;
    const response = await fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
    });
    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
    return await response.json();
}

async function fetchAllConversationDetails(organizationId: string, conversations: any[]): Promise<any[]> {
    const detailPromises = conversations.map(conv =>
        fetch(`https://claude.ai/api/organizations/${organizationId}/chat_conversations/${conv.uuid}`, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        }).then(response => {
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json();
        })
    );
    return await Promise.all(detailPromises);
}

async function exportConversations() {
    try {
        const organizationId = await getCookie();
        if (!organizationId) {
            console.error("Required cookie not found");
            return;
        }

        const conversations = await fetchConversations(organizationId);
        const detailedConversations = await fetchAllConversationDetails(organizationId, conversations);

        const jsonData = JSON.stringify(detailedConversations, null, 2);
        const blob = new Blob([jsonData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        // Please don't ask, just use a proper language or one of the bazillion libraries if you see this.
        const now = new Date();
        const year = now.getFullYear();
        const month = (now.getMonth() + 1).toString().padStart(2, '0');
        const day = now.getDate().toString().padStart(2, '0');
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const timezoneOffset = -now.getTimezoneOffset() / 60;
        const formattedDate = `${year}-${month}-${day}T${hours}${minutes}${timezoneOffset >= 0 ? '+' : '-'}${Math.abs(timezoneOffset)}`;

        const filename = `${formattedDate}_claude_conversations_export.json`;
        await browser.downloads.download({
            url: url,
            filename: filename,
            saveAs: true
        });
        URL.revokeObjectURL(url);
    } catch (error) {
        console.error("Error exporting conversations:", error);
    }
}

browser.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "exportConversations") {
        exportConversations();
    }
});

================
File: src/html/chat_export_popup.html
================
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Claude Chat Backup</title>
    <style>
        body {
            width: 300px;
            padding: 20px;
            font-family: Arial, sans-serif;
        }
        h2 {
            margin-top: 0;
            color: #333;
        }
        .function-list {
            list-style-type: none;
            padding: 0;
        }
        .function-item {
            margin-bottom: 15px;
        }
        button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
<h2>Claude Chat Backup</h2>
<ul class="function-list">
    <li class="function-item">
        <button id="exportConversationsBtn">Backup Conversations</button>
    </li>
</ul>
<script src="../ui/chat_export_popup.js"></script>
</body>
</html>

================
File: src/manifest.json
================
{
  "manifest_version": 2,
  "name": "Claude.ai Chat Backup",
  "version": "1.0",
  "description": "Backs up all conversations into one JSON file.",
  "permissions": [
    "cookies",
    "downloads",
    "https://claude.ai/*"
  ],
  "background": {
    "scripts": ["chat_export_background.js"],
    "persistent": false
  },
  "browser_action": {
    "default_title": "Backup Conversations",
    "default_popup": "html/chat_export_popup.html"
  }
}

================
File: src/ui/chat_export_popup.ts
================
document.addEventListener('DOMContentLoaded', () => {
    const exportConversationsBtn = document.getElementById('exportConversationsBtn');

    if (exportConversationsBtn) {
        exportConversationsBtn.addEventListener('click', () => {
            browser.runtime.sendMessage({ action: "exportConversations" });
        });
    }
});
